name: build

on:
  push:
    branches:
      - main
      - 'fix/**'
      - 'feature/**'
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'
  schedule:
    - cron: '1 0 * * 4'

env:
  SDK_VERSION: '0.6.0'
  LINUX_SDK: 'https://github.com/madmachineio/mm-sdk/releases/download/0.6.0-alpha.2/mm-sdk-0.6.0-alpha.2-ubuntu18.04-x64.tar.bz2'
  MACOS_SDK: 'https://github.com/madmachineio/mm-sdk/releases/download/0.6.0-alpha.2/mm-sdk-0.6.0-alpha.2-macOS-x64.zip'

jobs:
  build_default:
    name: Test build on ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-20.04, macos-10.15, macos-11]
        os: [ubuntu-20.04, macos-10.15]
        # os: [ubuntu-20.04]
        swift: ["5.4.0"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check action type
        run: |
          echo "OS: $RUNNER_OS"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: `git rev-parse --abbrev-ref HEAD`"

      - name: Prepare Swift
        uses: fwal/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}

      - name: Get Swift version
        run: swift --version

      - name: Prepare mm-sdk
        id: prepare-sdk
        run: |
          echo "Get mm-sdk on $RUNNER_OS"
          if [ "$RUNNER_OS" == 'Linux' ];then
            wget ${{ env.LINUX_SDK }} -O ~/sdk.tar.bz2
            tar -jxvf ~/sdk.tar.bz2 -C ~/
          elif [ "$RUNNER_OS" == 'macOS' ];then
            wget ${{ env.MACOS_SDK }} -O ~/sdk.zip
            unzip ~/sdk.zip -d ~/
          else
            ehco "Unrecognized OS $RUNNER_OS"
            exit 1
          fi
          echo "::set-output name=SDK_VERSION::$(~/mm-sdk/usr/mm/mm --version)"
      
      - name: Abort if mm-sdk version not match
        if: ${{ steps.prepare-sdk.outputs.SDK_VERSION != env.SDK_VERSION }}
        run: |
          echo "Required SDK version: ${{ env.SDK_VERSION }}"
          echo "Current SDK version: ${{ steps.prepare-sdk.outputs.SDK_VERSION }}"
          exit 1

      - name: Build default project
        id: build-project
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf .build
          rm -rf Package.resolved
          ~/mm-sdk/usr/mm/mm build
          echo "::set-output name=EXAMPLES::$(find . -maxdepth 1 -name "Examples")"
          rm -rf .build
          rm -rf Package.resolved

      - name: Build default examples
        if: ${{ steps.build-project.outputs.EXAMPLES != '' }}
        run: |
          REPO_ADDR=${GITHUB_REPOSITORY#*/}.git
          find $GITHUB_WORKSPACE/Examples -name "Package.swift" > $GITHUB_WORKSPACE/examples.txt
          dirarray=($(cat $GITHUB_WORKSPACE/examples.txt))

          for item in "${dirarray[@]}"; do
            example_path=$(dirname "${item}")
            cd $example_path

            echo "Modify example package dependency to: $GITHUB_SHA"
            LINE_NUMBER=$(sed -n "/$REPO_ADDR/=" ./Package.swift)
            sed -i'.bak' -e ""$LINE_NUMBER"s/branch(\"main\")/revision(\"$GITHUB_SHA\")/g" ./Package.swift

            rm -rf .build
            rm -rf Package.resolved
            ~/mm-sdk/usr/mm/mm build
            rm -rf .build
            rm -rf Package.resolved
          done

      - name: CI Build project
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf .build
          rm -rf Package.resolved
          ~/mm-sdk/usr/mm/mm cibuild
          rm -rf .build
          rm -rf Package.resolved

      - name: CI Build examples
        if: ${{ steps.build-project.outputs.EXAMPLES != '' }}
        run: |
          REPO_ADDR=${GITHUB_REPOSITORY#*/}.git
          dirarray=($(cat $GITHUB_WORKSPACE/examples.txt))

          for item in "${dirarray[@]}"; do
            example_path=$(dirname "${item}")
            cd $example_path

            rm -rf .build
            rm -rf Package.resolved
            ~/mm-sdk/usr/mm/mm cibuild
            rm -rf .build
            rm -rf Package.resolved

            cp -rf thumbv7em-unknown-none-eabi* $GITHUB_WORKSPACE
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Binary build on ${{ matrix.os }}
          path: |
            thumbv7em-unknown-none-eabi
            thumbv7em-unknown-none-eabihf
          retention-days: 7